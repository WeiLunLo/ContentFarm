{
    "collab_server" : "",
    "contents" : "library(shiny)\nsource(\"global.R\")\nserver <- function(input, output) {\n  \n  output$prediction <- renderPrint({\n    input$go\n    test <- isolate(input$text)\n    t.word <- as.character(teepr$title)\n    t.word <- c(t.word, test)\n    teepr_words = lapply(t.word, function(x) segment(x, cutter))\n    d.corpus <- Corpus(VectorSource(teepr_words))\n    d.corpus <- tm_map(d.corpus, removeNumbers)\n    tdm <- TermDocumentMatrix(d.corpus, control = list(wordLengths = c(1,10)))\n    tdmMatrix <- as.matrix(tdm)\n    \n    t <- as.data.frame(tdmMatrix)\n    t1 <- apply(t, 1, sum)\n    t2 <- cbind(t, t1)\n    names(t2)[2848] <- \"smr\"\n    t3 <- t2[order(-t2$smr), ]\n    t3 <- t3[1:300, ]\n    t4 <- t(t3)\n    t4 <- t4[-2848, ]\n    #process the teepr for setting z_like >= 1 as y, others are n. And set it as factor for SVM\n    teepr2 <- mutate(teepr, z_1 = ifelse(z_like >= 1, \"y\", \"n\"))\n    teepr2$z_1 <- as.factor(teepr2$z_1)\n    teepr2 <- rbind(teepr2, NA)\n    teeprF <- cbind(teepr2, t4)\n    \n    feature2 <- teeprF[, c(5, 15:314)]\n    index <- 1:nrow(teeprF)\n    testindex <- sample(index, trunc(length(index)*30/100))\n    trainset2 <- feature2[-testindex,]\n    testset2 <- feature2[testindex,]\n    fit <- lm(likes_count~. , data = trainset2)\n    #summary(fit)\n    kk <- feature2[2847, -1]\n    row.names(kk) <- \"predicted likes_count:\"\n    prediction <- predict(fit, kk)\n    prediction\n  })\n}",
    "created" : 1484049350409.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2658824230",
    "id" : "5A6BB597",
    "lastKnownWriteTime" : 1484053262,
    "last_content_update" : 1484053262450,
    "path" : "C:/Users/acer/Desktop/ContentFarm/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}